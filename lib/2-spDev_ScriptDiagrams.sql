/**
<summary>
Script Sql Server 2005 diagrams
(inspired by usp_ScriptDatabaseDiagrams for Sql Server 2000 by Clay Beatty)
Tweaked by Joel Mansford April 2008 to make suitable to call from PowerShell and do multiple diagrams
</summary>
<example>
--NOTE: Scalar-valued Function [Tool_VarbinaryToVarcharHex] must exist before this script is run
EXEC spDev_ScriptDiagrams 'DatabaseName'
</example>
<author>Craig Dunn</author>
<remarks>
Helpful Articles
----------------
1) Upload / Download to Sql 2005
http://staceyw.spaces.live.com/blog/cns!F4A38E96E598161E!404.entry

2) MSDN: Using Large-Value Data Types
http://msdn2.microsoft.com/en-us/library/ms178158.aspx

3) "original" Script, Save, Export SQL 2000 Database Diagrams
http://www.thescripts.com/forum/thread81534.html
http://groups-beta.google.com/group/comp.databases.ms-sqlserver/browse_frm/thread/ca9a9229d06a56f9?dq=&hl=en&lr=&ie=UTF-8&oe=UTF-8&prev=/groups%3Fdq%3D%26num%3D25%26hl%3Den%26lr%3D%26ie%3DUTF-8%26oe%3DUTF-8%26group%3Dcomp.databases.ms-sqlserver%26start%3D25
</remarks>
<param name="name">Name of the diagram in the Sql Server database instance</param>
*/
CREATE PROCEDURE [dbo].[spDev_ScriptDiagrams]
(
	@name VARCHAR(128)=NULL
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @output			VARCHAR(MAX) -- Used so we can pipe the output
	DECLARE @thisdiagname	VARCHAR(128)

	DECLARE @diagram_id		INT
	DECLARE @index			INT
	DECLARE @size			INT
	DECLARE @chunk			INT
	DECLARE @line			VARCHAR(max)
	
	CREATE TABLE #Diagrams
		([diagname]	VARCHAR(128), [script] VARCHAR(MAX))

	-- Get PK diagram_id using the diagram's name (which is what the user is familiar with)	
	DECLARE diagram_cursor CURSOR 
	FOR  SELECT 
		[name],diagram_id, DATALENGTH(definition) 
		FROM sysdiagrams 
		WHERE [name] = ISNULL(@name,[name])
	
	OPEN diagram_cursor
	FETCH NEXT FROM diagram_cursor
		INTO @thisdiagname,@diagram_id,@size
		
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Set start index, and chunk 'constant' value
		SET @index = 1  -- 
		SET @chunk = 32	-- values that work: 2, 6
						-- values that fail: 15,16, 64
		
		SET @output = ''

		IF @diagram_id IS NULL
		BEGIN
			SET @output=@output+char(13)+'/**<error>
	Diagram name [' + @thisdiagname + '] could not be found.
	</error>*/' 
		END
		ELSE -- Diagram exists
		BEGIN
			-- Now with the diagram_id, do all the work
			SET @output=@output+char(13)+'/**'
			SET @output=@output+char(13)+'<summary>'
			SET @output=@output+char(13)+'Restore diagram ''' + @thisdiagname + ''''
			SET @output=@output+char(13)+'</summary>'
			SET @output=@output+char(13)+'<remarks>'
			SET @output=@output+char(13)+'Generated by spDev_ScriptDiagrams/Tool_VarbinaryToVarcharHex'
			SET @output=@output+char(13)+'Will attempt to create [sysdiagrams] table if it doesn''t already exist'
			SET @output=@output+char(13)+'</remarks>'
			-- Generated dates screw-up diffs...
			--SET @output=@output+char(13)+'<generated>' + LEFT(CONVERT(VARCHAR(23), GETDATE(), 121), 16) + '</generated>'
			SET @output=@output+char(13)+'*/'
			SET @output=@output+char(13)+'PRINT ''=== spDev_ScriptDiagrams restore diagram [' + @thisdiagname + '] ==='''
			SET @output=@output+char(13)+'	-- If the sysdiagrams table has not been created in this database, create it!
					IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ''sysdiagrams'')
					BEGIN
						-- Create table script generated by Sql Server Management Studio
						-- _Assume_ this is roughly equivalent to what Sql Server/Management Studio
						-- creates the first time you add a diagram to a 2005 database
						CREATE TABLE [dbo].[sysdiagrams](
							[name] [sysname] NOT NULL,
							[principal_id] [int] NOT NULL,
							[diagram_id] [int] IDENTITY(1,1) NOT NULL,
							[version] [int] NULL,
							[definition] [varbinary](max) NULL,
						PRIMARY KEY CLUSTERED 
						(
							[diagram_id] ASC
						)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) ,
						 CONSTRAINT [UK_principal_name] UNIQUE NONCLUSTERED 
						(
							[principal_id] ASC,
							[name] ASC
						)WITH (PAD_INDEX  = OFF, IGNORE_DUP_KEY = OFF) 
						) 
						EXEC sys.sp_addextendedproperty @name=N''microsoft_database_tools_support'', @value=1 , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''sysdiagrams''
						PRINT ''[sysdiagrams] table was created as it did not already exist''
					END
					-- Target table will now exist, if it didn''t before'
			SET @output=@output+char(13)+'SET NOCOUNT ON -- Hide (1 row affected) messages'
			SET @output=@output+char(13)+'DECLARE @newid INT'
			SET @output=@output+char(13)+'DECLARE @DiagramSuffix          varchar (50)'
			SET @output=@output+char(13)+''
			
			-- If you have issues with uniqueness then uncomment below
			SET @output=@output+char(13)+'SET @DiagramSuffix='''''
			--SET @output=@output+char(13)+'PRINT ''Suffix diagram name with date, to ensure uniqueness'''	
			--SET @output=@output+char(13)+'SET @DiagramSuffix = '' '' + LEFT(CONVERT(VARCHAR(23), GETDATE(), 121), 16)'
			SET @output=@output+char(13)+''
			SET @output=@output+char(13)+'PRINT ''Create row for new diagram'''
			-- Output the INSERT that _creates_ the diagram record, with a non-NULL [definition],
			-- important because .WRITE *cannot* be called against a NULL value (in the WHILE loop)
			-- so we insert 0x so that .WRITE has 'something' to append to...
			SET @output=@output+char(13)+'BEGIN TRY'
			SET @output=@output+char(13)+'    PRINT ''Write diagram ' + @thisdiagname + ' into new row (and get [diagram_id])'''
			SELECT @line =  
				  '    INSERT INTO sysdiagrams ([name], [principal_id], [version], [definition])'
				+ ' VALUES (''' + [name] + '''+@DiagramSuffix, '+ CAST (principal_id AS VARCHAR(100))+', '+CAST (version AS VARCHAR(100))+', 0x)'
			FROM sysdiagrams WHERE diagram_id = @diagram_id
			SET @output=@output+char(13)+ISNULL(@line,'')
			SET @output=@output+char(13)+'    SET @newid = SCOPE_IDENTITY()'
			SET @output=@output+char(13)+'END TRY'
			SET @output=@output+char(13)+'BEGIN CATCH'
			SET @output=@output+char(13)+'    PRINT ''XxXxX '' + Error_Message() + '' XxXxX'''
			SET @output=@output+char(13)+'    PRINT ''XxXxX END spDev_ScriptDiagrams - fix the error before running again XxXxX'''
			SET @output=@output+char(13)+'    RETURN'
			SET @output=@output+char(13)+'END CATCH'
			SET @output=@output+char(13)+''
			SET @output=@output+char(13)+'PRINT ''Now add all the binary data...'''
			SET @output=@output+char(13)+'BEGIN TRY'
			WHILE @index < @size
			BEGIN
				-- Output as many UPDATE statements as required to append all the diagram binary
				-- data, represented as hexadecimal strings
				SELECT @line =  
					 '    UPDATE sysdiagrams SET [definition] .Write ('
					+ ' 0x' + UPPER(dbo.Tool_VarbinaryToVarcharHex (SUBSTRING (definition, @index, @chunk)))
					+ ', null, 0) WHERE diagram_id = @newid -- index:' + CAST(@index AS VARCHAR(100))
				FROM	sysdiagrams 
				WHERE	diagram_id = @diagram_id
				SET @output=@output+char(13)+ISNULL(@line,'-- NULL Line2')
				SET @index = @index + @chunk
			END
			SET @output=@output+char(13)+''
			SET @output=@output+char(13)+'    PRINT ''=== Finished writing diagram id '' + CAST(@newid AS VARCHAR(100)) + ''  ==='''
			SET @output=@output+char(13)+'    PRINT ''=== Refresh your Databases-[DbName]-Database Diagrams to see the new diagram ==='''
			SET @output=@output+char(13)+'END TRY'
			SET @output=@output+char(13)+'BEGIN CATCH'
			SET @output=@output+char(13)+'    -- If we got here, the [definition] updates didn''t complete, so delete the diagram row'
			SET @output=@output+char(13)+'    -- (and hope it doesn''t fail!)'
			SET @output=@output+char(13)+'    DELETE FROM sysdiagrams WHERE diagram_id = @newid'
			SET @output=@output+char(13)+'    PRINT ''XxXxX '' + Error_Message() + '' XxXxX'''
			SET @output=@output+char(13)+'    PRINT ''XxXxX END spDev_ScriptDiagrams - fix the error before running again XxXxX'''
			SET @output=@output+char(13)+'    RETURN'
			SET @output=@output+char(13)+'END CATCH'
		END
		INSERT INTO #Diagrams 
		SELECT @thisdiagname,@Output
		
		FETCH NEXT FROM diagram_cursor
		INTO @thisdiagname,@diagram_id,@size
	END -- End Cursor
	
	CLOSE diagram_cursor
	DEALLOCATE diagram_cursor
	
	SELECT * FROM #Diagrams
	
END
